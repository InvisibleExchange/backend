use std::{collections::HashMap, path::Path, str::FromStr};

use invisible_backend::utils::{
    cairo_output::{format_cairo_ouput, parse_cairo_output, preprocess_cairo_output},
    // cairo_output::{format_cairo_ouput, parse_cairo_output, preprocess_cairo_output},
    crypto_utils::{hash, hash_many, pedersen, pedersen_on_vec},
    storage::local_storage::MainStorage,
};

use invisible_backend::trees::Tree;

use num_bigint::BigUint;
use num_traits::{FromPrimitive, One, Zero};
use serde_json::json;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // let program_output = test_program_output2();

    // let program_output = format_cairo_ouput(program_output);
    // // let program_output = preprocess_cairo_output(program_output);

    // // for (i, output) in program_output.iter().enumerate() {
    // //     println!("{},", output);
    // // }

    // let output = parse_cairo_output(program_output);
    // println!("output: {:?} \n", output.mm_onchain_actions);

    let arr = vec![
        BigUint::from_str(
            "892356257239756198358065209856295762385265783258162785126378512357263857",
        )
        .unwrap(),
        BigUint::from_str(
            "189246198172401851074121892461981724018510741243252189246198172401851074",
        )
        .unwrap(),
        BigUint::from_str(
            "263664821936291892461981724018510741218924619817240185104619817240185107",
        )
        .unwrap(),
        BigUint::from_str(
            "189246198172401851074124189246198172401851074124074085542858078217863492",
        )
        .unwrap(),
        BigUint::from_str(
            "263189246198172401851074124366189246198172401851074126198172401851074124",
        )
        .unwrap(),
        BigUint::from_str(
            "263618924619817240118924619817240181892461981724018510741247240185107444",
        )
        .unwrap(),
        BigUint::from_str(
            "263664821936297185028342543436642737036272536579074085542858078217863492",
        )
        .unwrap(),
    ];
    let arr = arr.iter().collect::<Vec<&BigUint>>();

    // let res = hash(
    //     &BigUint::from_str(
    //         "2636648219362971850283425434366427370362725365790740855428580782178634926362",
    //     )
    //     .unwrap(),
    //     &BigUint::from_str(
    //         "2636648219362971850283425434366427370362725365790740855428580782178634926362",
    //     )
    //     .unwrap(),
    // );

    let res = hash_many(&arr);

    println!("poseidon: {:?} \n", res);

    Ok(())
}

fn test_program_output() -> &'static str {
    return "-1167858433667725231675207078476186098721823340966419893778891282428750607058
    1477479647017246745902113942625728486274926676366053133907271462431119959473
    597604491575640981504
    5846006549323611672814739330920472310853448761344
    237684487542793012780631851010
    4839524406068408503119694702759214384341319683
    12345
    54321
    55555
    66666
    12345
    54321
    66666
    8
    8
    6
    8
    250
    2500
    50000
    250000
    6
    6
    6
    50000000
    500000000
    350000000
    150000
    3000000
    1500000
    15000000
    100000000
    1000000000
    9090909
    7878787
    5656565
    874739451078007766457464989774322083649278607533249481151382481072868806602
    -293669058575504239171450380195767955102919189693631133349615525321517286156
    -1778709136316592932772395480593926193395835735891797916332204797460728444129
    296568192680735721663075531306405401515803196637037431012739700151231900092
    9090909
    -1701546809720829872076927715446184578644121004383695654695176662814926275788
    0
    7878787
    1536374069007233984544513184582763446994413226934374324309183509264711945525
    0
    5656565
    0
    0
    2681012288826897986174311721013788427095758336
    74901839598575695933198600747477116051910698073949569800895908963417866925
    3093476031983839916840789305451873349190128640
    -988284134081046036236016425765155854535002655098123785556596656546316966913
    3093476031983839916840789305451873347990128640
    12388412551322563046938301055460190568676903087755960114816012945396558209
    3093476031983839916840789305451873348390128640
    12388412551322563046938301055460190568676903087755960114816012945396558209
    34560
    816227615319284438340660495765833546330618534197173018518808756346610353951
    -325019161403008150380666445030255479740686571167181360985475936415182493841
    -619352139672635619815186192279296739739574965018798621175094375956180482075
    -57307046786043844633993432443025854875989396019838665226418664913775125260
    -677635886794153197945501764168390727883080233715057263845080514423847265029
    2198797855668305952769
    1453569843345417594979525465524174435057739828550332058810694205229325558992
    -966683633799912014367613957783227657598190154503678342008000529605705338095
    -1781762324624903209752174525271748752506557115209488254321585906157191987905
    -1475032142537352234435949185690249894208149620961237363809825325188463812737
    -137223300243941594208920197072446078603742072635641146209993330558453110463
    18904488656604366991914239636993321082028032
    -829294405920618740872957117024140255426410501838561529079382114579751386391
    744961808157708231482903768766879719646159149052813110535796042797801728402
    18904488656604549433660456156953644328026115
    868956032582342156597685557982096725347388228236225672717882653375104209960
    744961808157708231482903768766879719646159149052813110535796042797801728402
    18904488656604362436288614319371692825116678
    -1380579702564256599654815235035118467499262769695332652243356630708851237312
    744961808157708231482903768766879719646159149052813110535796042797801728402
    31385588067163845271157159140027272705097623391735199563776
    11984313426113403930531712584725170852943835908136822112257
    984935119886124645086441620844852851238293707965663463054997145584753410360
    43939791537937206798828737986442605537302334280663268589568
    11984313426113403929270215628273520761178646852403200000003
    -504842325180540155521288033432623361423484723456325970396134555825872118956
    340282366920938463500268095579187314692";
}

fn test_program_output2() -> &'static str {
    return "-1167858433667725231675207078476186098721823340966419893778891282428750607058
    -475807735012534118110614049524266257601842131054358484534450278548296395194
    597606316000438910976
    2923047876152202897812111479749281210805151334400
    4839524406068408503119694702759214384341319683
    12345
    54321
    55555
    66666
    12345
    54321
    66666
    8
    8
    6
    8
    250
    2500
    50000
    250000
    6
    6
    6
    50000000
    500000000
    350000000
    150000
    3000000
    1500000
    15000000
    100000000
    1000000000
    9090909
    7878787
    5656565
    874739451078007766457464989774322083649278607533249481151382481072868806602
    -293669058575504239171450380195767955102919189693631133349615525321517286156
    -1778709136316592932772395480593926193395835735891797916332204797460728444129
    296568192680735721663075531306405401515803196637037431012739700151231900092
    9090909
    1166260320567678569074286927415518331832071223798029965790371363666066427203
    0
    7878787
    985387061409897285031411378697247401257340098622853134207444831726099316521
    0
    5656565
    0
    0
    2681012288826897986174311721013788427095758336
    1155560327560595810277547796632773459017238673296569489024397323316334105299
    3093476031983839916840789305451873367190128640
    -1658963554315240085244029775845526063619100631627748261736491711334778038403
    -1062562979796384832045215103991316161306001503466984405301040468046914782906
    0
    1182897730672094755697375576558587019100422400
    -1062562979796384832045215103991316161306001503466984405301040468046914782906
    61872278164781256322784325782984327823785
    9444732965739290427904000000001
    -1062562979796384832045215103991316161306001503466984405301040468046914782906
    61872278164781256322784325782984327823785
    174224571863520493302692531970804614693376000000002
    -1062562979796384832045215103991316161306001503466984405301040468046914782906
    61872278164781256322784325782984327823785
    9444732965739290427904000000001
    -1062562979796384832045215103991316161306001503466984405301040468046914782906
    61872278164781256322784325782984327823785
    174224571863520493302692531970804614693376000000002
    -1062562979796384832045215103991316161306001503466984405301040468046914782906
    61872278164781256322784325782984327823785
    9444732965739290427904000000001
    -1062562979796384832045215103991316161306001503466984405301040468046914782906
    0
    174224571863520493302692531970804614693376000000003
    18904435007848367023936622422249802341285890
    -1197935042626377341349615003236513917929127888038071578626666756275079169570
    885386392038643549624427689518434212767149919132657342127470828943773935401
    18904435007848598848320947164437737461776389
    -1254846514777220034619354788471113135490948274611757781792208018893531894578
    885386392038643549624427689518434212767149919132657342127470828943773935401
    18831384596390483743485184152799368555499912079055450551563
    13562735194430779080930195247607106422407053998817280000003
    -1062562979796384832045215103991316161306001503466984405301040468046914782906
    25108486331777164507320973576007034967307300227519485050880
    13738115390910487432560743694746788568019920645985952333825
    1571518249481932923260906299462758204245944960281784438868661894750375958570
    1";
}

use std::{str::FromStr, time::Instant};

use invisible_backend::utils::{
    cairo_output::{format_cairo_ouput, preprocess_cairo_output},
    crypto_utils::hash_many,
};
use num_bigint::BigUint;
use num_traits::{FromPrimitive, Zero};
use serde_json::json;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // let prog_output = format_cairo_ouput(test_program_output());
    // let prog_output = preprocess_cairo_output(prog_output);

    // println!("[");
    // for val in prog_output {
    //     println!("{}n,", val);
    // }
    // println!("]");

    let mut x = BigUint::from_str(
        "1350061691366037849417249737527838954570626040566244765017315475912229968809",
    )
    .unwrap();

    let serialized = serde_json::to_string(&x).unwrap();

    // let p-ath =
    //     Path::new("../../prover_contracts/cairo_contracts/transaction_batch/tx_batch_input.json");
    // std::fs::write(path, serde_json::to_string(&output_json).unwrap()).unwrap();

    println!("{}", serialized);

    Ok(())
}

fn test_program_output() -> &'static str {
    return "-45230484140781902039364308632130325836898610577401057630385528253157371784
    -322295610916015932271215938346917252935201909527625183318895743567236191148
    597616123369280765959
    1461523938076101448906054530948820005610982473729
    210258926710712570525957419222609112870661182717955
    3592681469
    453755560
    2413654107
    277158171
    3592681469
    453755560
    277158171
    8
    8
    6
    8
    250
    2500
    50000
    250000
    6
    6
    6
    50000000
    500000000
    350000000
    150000
    3000000
    1500000
    15000000
    100000000
    1000000000
    9090909
    7878787
    5656565
    874739451078007766457464989774322083649278607533249481151382481072868806602
    -293669058575504239171450380195767955102919189693631133349615525321517286156
    -1778709136316592932772395480593926193395835735891797916332204797460728444129
    296568192680735721663075531306405401515803196637037431012739700151231900092
    9090909
    0
    0
    7878787
    0
    0
    5656565
    0
    0
    11010699151384632101889
    246527065650711893932399548081420727619250335348
    935209463481017074549799650707641029269350349807995354666054817200388288569
    -1176429674817412353441385465446881128424223965241031048205210386034114583600
    -777987955261681333379195156561510799130994666060499174420417582116054718965
    -1407144318221502259713094405480943211106849650250371755551066249187436951827
    139851914712643908828930902860326028593076369298496735428741022793897310608";
}




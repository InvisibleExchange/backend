use invisible_backend::utils::cairo_output::{format_cairo_ouput, preprocess_cairo_output};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // let mut tx_batch = TransactionBatch::new(TREE_DEPTH);
    // tx_batch.init();

    // verify_state_storage(&tx_batch.state_tree)?;

    // let indexes = vec![15];
    // update_invalid_state(
    //     &tx_batch.state_tree,
    //     &tx_batch.firebase_session,
    //     &tx_batch.backup_storage,
    //     indexes,
    // );

    let program_output_ = test_program_output();

    let program_output_ = format_cairo_ouput(program_output_);
    let program_output = preprocess_cairo_output(program_output_);

    for (i, output) in program_output.iter().enumerate() {
        println!("{}n,", output);
    }

    // let output = parse_cairo_output(program_output);
    // println!("output: {:?} \n", output.mm_onchain_actions);

    Ok(())
}

fn test_program_output() -> &'static str {
    return "-1485885826981160137131550668676283884804634400888099008674586068148300234314
    916692353632818141094092754065738969697627650589059088688998936652690781169
    597640121284298801154
    10230556062806717488988994386229308987279123939328
    210258926710712570525957419222609112870661182717954
    3592681469
    453755560
    2413654107
    277158171
    3592681469
    453755560
    277158171
    8
    8
    6
    8
    250
    2500
    50000
    250000
    6
    6
    6
    5000000
    50000000
    350000000
    150000
    3000000
    1500000
    15000000
    100000000
    1000000000
    40161
    40231
    874739451078007766457464989774322083649278607533249481151382481072868806602
    -293669058575504239171450380195767955102919189693631133349615525321517286156
    -1778709136316592932772395480593926193395835735891797916332204797460728444129
    296568192680735721663075531306405401515803196637037431012739700151231900092
    40231
    114955376182661222528459590620020015627924498786408205437491963098052443160
    -1769753139597284314924857979520727930568723412575200329459385805943111611193
    13666080137912091839699724689050007859022336
    1669987464367741806901581703315727722326801619559351826421346426798401265671
    13666080137912192817078241668293796518289664
    95386976468426923783346594028622962171518585924647255192876045839129024801
    13666080137912250296024753217725194046923008
    -976410038976754060617081471252144277675844395132522676197354881363127483375
    13666080137912329524187267482062789990873344
    -976410038976754060617081471252144277675844395132522676197354881363127483375
    3181926758794964349064301926331008
    987253332575707135225395624901186832535835507542
    1642363199488299864620532354628131733495459515046521176289134923496084204783";
}
